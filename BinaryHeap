//Binary Heap, Sort
#include <iostream>
#include<vector>
#include<algorithm>

using namespace std;

class Heap{
public:
    vector<int> list;
    
    Heap(int* arr, int n){
        list = vector<int>(arr, arr + n);
        for(int i = n / 2; i >= 0; --i){
            heapify(i);
        }
    }
    
    void heapify(int i){
        
        while(true){
            int left = 2*i+1;
            int right = 2*i+2;
            int j = i;
            int n = list.size();
            
            if(left < n && list[j] < list[left]){
                j = left;
            }
            
            if(right < n && list[j] < list[right]){
                j = right;
            }
            
            if(i == j){
                break;
            }
            
            swap(list[i], list[j]);
            i = j;
        }
    }
    
    int getMax(){
        int result = list[0];
        list[0] = list[list.size()-1];
        list.erase(list.end()-1);
        heapify(0);
        return result;
    }
    
    void print(){
        int n = list.size();
        for(int i = 0; i < n; ++i){
            cout << list[i] << " ";
        }
        cout << endl;
    }
    
    vector<int> sort(){
        int n = list.size();
        cout << n << endl;
        vector<int> result(n, 0);
        for(int i = n-1; i >= 0; --i){
            result[i] = getMax();
        }
        return result;
    }
    
};

int main()
{
    int arr[] = {1, 3, 2, 5, 7};
    Heap heap = Heap(arr, 5);
    heap.print();
    vector<int> result = heap.sort();
    for(int i = 0; i < result.size(); ++i){
        cout << result[i] << " ";
    }
    cout << endl << sizeof(arr);
    return 0;
}
